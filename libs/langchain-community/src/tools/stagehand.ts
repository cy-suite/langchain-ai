import { CallbackManagerForToolRun } from "@langchain/core/callbacks/manager";
import { Tool, type ToolParams } from "@langchain/core/tools";
import { getEnvironmentVariable } from "@langchain/core/utils/env";

// TODO create a TOOLKIT for stagehand

import { Tool, ToolInterface } from "@langchain/core/tools";
import { Toolkit } from "../base.js";
import { ConneryService } from "../../../tools/connery.js";

/**
 * ConneryToolkit provides access to all the available actions from the Connery Runner.
 * @extends Toolkit
 */
export class StagehandToolkit extends Toolkit {
  tools: ToolInterface[];
  // add tools here
}


/**
 * Tavily search API tool integration.
 *
 * Setup:
 * Install `@langchain/community`. You'll also need an API key set as `TAVILY_API_KEY`.
 *
 * ```bash
 * npm install @langchain/community
 * ```
 *
 * ## [Constructor args](https://api.js.langchain.com/classes/_langchain_community.tools_tavily_search.TavilySearchResults.html#constructor)
 *
 * <details open>
 * <summary><strong>Instantiate</strong></summary>
 *
 * ```typescript
 * import { TavilySearchResults } from "@langchain/community/tools/tavily_search";
 *
 * const tool = new TavilySearchResults({
 *   maxResults: 2,
 *   // ...
 * });
 * ```
 * </details>
 *
 * <br />
 *
 * <details>
 *
 * <summary><strong>Invocation</strong></summary>
 *
 * ```typescript
 * await tool.invoke("what is the current weather in sf?");
 * ```
 * </details>
 *
 * <br />
 *
 * <details>
 *
 * <summary><strong>Invocation with tool call</strong></summary>
 *
 * ```typescript
 * // This is usually generated by a model, but we'll create a tool call directly for demo purposes.
 * const modelGeneratedToolCall = {
 *   args: {
 *     input: "what is the current weather in sf?",
 *   },
 *   id: "tool_call_id",
 *   name: tool.name,
 *   type: "tool_call",
 * };
 * await tool.invoke(modelGeneratedToolCall);
 * ```
 *
 * ```text
 * ToolMessage {
 *   "content": "...",
 *   "name": "tavily_search_results_json",
 *   "additional_kwargs": {},
 *   "response_metadata": {},
 *   "tool_call_id": "tool_call_id"
 * }
 * ```
 * </details>
 */

// ACT TOOL
import { Tool } from "@langchain/core/tools";
import { Stagehand } from "@browserbasehq/stagehand";

export class StagehandActTool extends Tool {
  name = "stagehand_act";

  description =
    "Use this tool to perform an action on the current web page using Stagehand. The input should be a string describing the action to perform.";

  private stagehand: Stagehand;

  constructor(stagehandInstance?: Stagehand) {
    super();
    if (stagehandInstance) {
      this.stagehand = stagehandInstance;
    } else {
      this.stagehand = new Stagehand({
        env: "LOCAL",
        enableCaching: true,
      });
    }
  }

  async _call(input: string): Promise<string> {
    await this.stagehand.init();
    const result = await this.stagehand.act({ action: input });
    if (result.success) {
      return `Action performed successfully: ${result.message}`;
    } else {
      return `Failed to perform action: ${result.message}`;
    }
  }
}

// extract

import { Tool } from "@langchain/core/tools";
import { Stagehand } from "@browserbasehq/stagehand";
import { z } from "zod";

export class StagehandExtractTool extends Tool {
  name = "stagehand_extract";

  description =
    "Use this tool to extract structured information from the current web page using Stagehand. The input should be a JSON string with 'instruction' and 'schema' fields.";

  private stagehand: Stagehand;

  constructor(stagehandInstance?: Stagehand) {
    super();
    if (stagehandInstance) {
      this.stagehand = stagehandInstance;
    } else {
      this.stagehand = new Stagehand({
        env: "LOCAL",
        enableCaching: true,
      });
    }
  }

  async _call(input: string): Promise<string> {
    await this.stagehand.init();

    let parsedInput;
    try {
      parsedInput = JSON.parse(input);
    } catch (error) {
      return `Invalid input. Please provide a JSON string with 'instruction' and 'schema' fields.`;
    }

    const { instruction, schema } = parsedInput;

    if (!instruction || !schema) {
      return `Input must contain 'instruction' and 'schema' fields.`;
    }

    let zodSchema;
    try {
      zodSchema = eval(schema); // Be cautious with eval
    } catch (error) {
      return `Invalid schema.`;
    }

    try {
      const result = await this.stagehand.extract({
        instruction,
        schema: zodSchema,
      });
      return JSON.stringify(result);
    } catch (error) {
      return `Failed to extract information: ${error.message}`;
    }
  }
}
//Note: Be cautious when using eval as it can execute arbitrary code. It's important to ensure that the input schema is safe and sanitized. Alternatively, predefine schemas or limit the inputs.

// OBSERVE TOOL

import { Tool } from "@langchain/core/tools";
import { Stagehand } from "@browserbasehq/stagehand";

export class StagehandObserveTool extends Tool {
  name = "stagehand_observe";

  description =
    "Use this tool to observe the current web page and retrieve possible actions using Stagehand. The input can be an optional instruction string.";

  private stagehand: Stagehand;

  constructor(stagehandInstance?: Stagehand) {
    super();
    if (stagehandInstance) {
      this.stagehand = stagehandInstance;
    } else {
      this.stagehand = new Stagehand({
        env: "LOCAL",
        enableCaching: true,
      });
    }
  }

  async _call(input: string): Promise<string> {
    await this.stagehand.init();

    const instruction = input || undefined;

    try {
      const result = await this.stagehand.observe({ instruction });
      return JSON.stringify(result);
    } catch (error) {
      return `Failed to observe page: ${error.message}`;
    }
  }
}